#+TITLE: Emacs Configuration
#+AUTHOR: Cuthbert Allan Y. Guerrero
#+STARTUP: showall

* Personal Information
#+BEGIN_QUOTE
Remember who you are

- Mufasa
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Cuthbert Allan Y. Guerrero"
        user-mail-address "cuthbert.guerrero@gmail.com")
#+END_SRC

* Initialize
Setup ~package~ and ~use-package~
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/")
             '("org" . "http://orgmode.org/elpa/"))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC

* Defaults
Basic configuration to make Emacs default behavior better.
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(fset 'yes-or-no-p 'y-or-n-p)

(delete-selection-mode t)
(global-auto-revert-mode t)
(show-paren-mode 1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(setq-default show-paren-delay 0)
(setq-default indent-tabs-mode nil)
(setq-default major-mode #'text-mode)
(setq ring-bell-function 'ignore
      make-backup-files nil
      auto-save-default nil
      delete-old-versions -1            ; delete excess backup versions silently
      version-control t                 ; use version control
      vc-make-backup-files t            ; make backups file even when in version controlled dir
      vc-follow-symlinks t              ; don't ask for confirmation when opening symlinked file
      sentence-end-double-space nil)    ; sentence SHOULD end with only a point.

(when (eq system-type 'darwin)
  (require 'ls-lisp)
  (setq-default ls-lisp-use-insert-directory-program nil)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))
  (setq-default mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'none))

;; Toggle fullscreen
(add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+END_SRC

* Diminish
Diminish minor modes to remove noise from the modeline
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)

(diminish 'auto-revert-mode)
(diminish 'visual-line-mode)
(diminish 'eldoc-mode)
(diminish 'abbrev-mode)
#+END_SRC

* Which-key
Allows Emacs to show hints on what key combinations there are.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish (which-key-mode)
  :config
  (which-key-mode))
#+END_SRC

* Ivy
Ido replacement
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :config
  (setq ivy-use-virtual-buffers t
        ivy-height 20
        ivy-count-format "%d/%d "))

(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-c g" . counsel-git)
         ("C-c G" . counsel-git-grep)))

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
         ("C-r" . swiper)
         ("C-c C-r" . ivy-resume))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

(use-package all-the-icons-ivy
  :after (ivy all-the-icons)
  :ensure t
  :config
  (all-the-icons-ivy-setup))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish (projectile-mode)
  :ensure t
  :diminish (projectile-mode)
  :config
  (add-to-list 'projectile-globally-ignored-directories "*node_modules")
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-mode-line
        '(:eval (format " [%s]" (projectile-project-name))))
  (setq projectile-remember-window-configs t
        projectile-completion-system 'ivy))

(use-package counsel-projectile
  :ensure t
  :after (projectile counsel)
  :config
  (counsel-projectile-mode))
#+END_SRC

* Term
Some helpful package to deal with term mode in Emacs.
** exec-path-from-shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns x))
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

** multi-term
#+BEGIN_SRC emacs-lisp
;; Open multi-term consider projectile root
(defun cube/multi-term ()
  "Opens up a new terminal in the directory associated with the current buffer's file."
  (interactive)
  (if (projectile-project-p)
      (projectile-with-default-dir (projectile-project-root) (multi-term))
    (multi-term)))

;; Vertical split multi-term
(defun cube/multi-term-vertical ()
  "Opens up a new terminal in the directory associated with the current buffer's file."
  (interactive)
  (split-window-right)
  (other-window 1)
  (if (projectile-project-p)
      (projectile-with-default-dir (projectile-project-root) (multi-term))
    (multi-term)))

;; Horizontal split multi-term
(defun cube/multi-term-horizontal ()
  "Opens up a new terminal in the directory associated with the current buffer's file."
  (interactive)
  (split-window-below)
  (other-window 1)
  (if (projectile-project-p)
      (projectile-with-default-dir (projectile-project-root) (multi-term))
    (multi-term)))

(use-package multi-term
  :ensure t
  :commands (multi-term)
  :bind (("C-c t v" . cube/multi-term-vertical)
         ("C-c t h" . cube/multi-term-horizontal)
         ("C-c t t" . cube/multi-term))
  :config
  (setq multi-term-program "/usr/local/bin/zsh"))
#+END_SRC

* User Interface
** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default t :font "IBM Plex Mono 14")
(set-face-font 'default "IBM Plex Mono-14")
(set-face-attribute 'fringe nil
                  :foreground (face-foreground 'default)
                  :background (face-background 'default))

(use-package all-the-icons
  :commands (all-the-icons-install-fonts))
#+END_SRC

** Color Theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t)

(load-theme 'leuven t)
#+END_SRC

** Doom Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :defer t
  :hook (after-init . doom-modeline-init)
  :config
  (setq doom-modeline-icon t))
#+END_SRC

** Dashboard
Awesome initial screen
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t)

(use-package dashboard
  :ensure t
  :config
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-items '((recents  . 10)
                        (projects . 5)
                        (agenda . 5)))
  (dashboard-setup-startup-hook))
#+END_SRC

** Dimmer
#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :ensure t
  :diminish (dimmer-mode)
  :config
  (setq dimmer-fraction 0.2)
  (dimmer-mode))
#+END_SRC

* Navigation
** Ace Window
Easy
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind (("C-c w w" . ace-window)
         ("C-c w k" . ace-delete-window)))
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-c w a" . avy-goto-char-2))

#+END_SRC

* Git Integration
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands (magit-status projectile-vc)
  :bind (("C-x g s" . magit-status)
         ("C-x g b" . magit-blame))
  :config
  (add-to-list 'magit-log-arguments "--no-abbrev-commit")
  (setq magit-popup-use-prefix-argument 'default
        magit-completing-read-function 'ivy-completing-read))
#+END_SRC

* Editor
** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :diminish (rainbow-delimiters-mode)
  :config
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :diminish (smartparens-mode)
  :config
  (require 'smartparens-config)
  (add-hook 'prog-mode-hook #'smartparens-mode))
#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC

* Note Taking
** Org Mode
#+BEGIN_SRC emacs-lisp
(load-library "find-lisp")
(use-package org
  :ensure t
  :mode ("\\.org$" . org-mode)
  :bind (("C-c o a" . org-agenda)
         ("C-c o c" . org-capture)
         ("C-c o b" . org-iswitchb))
  :config
  (setq org-hide-leading-stars t
        org-src-fontify-natively t
        org-startup-with-inline-images t
        org-log-done 'time)

  ;; Set default notes file
  (setq org-directory "~/Dropbox/Org")
  (setq org-startup-folder "content")
  (setq org-inbox-file "~/Dropbox/Org/inbox.org")
  (setq org-projects-file "~/Dropbox/Org/projects.org")
  (global-set-key (kbd "C-c o d") (lambda () (interactive) (find-file org-inbox-file)))
  (global-set-key (kbd "C-c o n") (lambda () (interactive) (find-file org-projects-file)))
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
  (setq org-agenda-files '("~/Dropbox/Org/inbox.org"
                           "~/Dropbox/Org/projects.org"
                           "~/Dropbox/Org/tickler.org"))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path file)
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; Set org-capture templates
  (setq org-capture-templates '(("t" "Todo [inbox]" entry (file "~/Dropbox/Org/inbox.org") "* TODO %i%?")
                                ("T" "Tickler" entry (file+headline "~/Dropbox/Org/tickler.org" "Tickler") "* %i%? \n %U")
                                ("n" "Note" entry (file+headline "~/Dropbox/Org/inbox.org" "Notes") "* NOTE %?\n%U" :empty-lines 1))))

(use-package org-download
  :ensure t)

(use-package org-bullets
  :ensure t
  :commands (org-bullets-mode)
  :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Markdown Mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

* Language
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish (flycheck-mode)
  :config
  (setq flycheck-check-syntax-automatically '(mode-enabled save))
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

** Company Mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish (company-mode)
  :config
  (setq company-tooltip-align-annotations t)
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode
  :ensure t
  :diminish (enh-ruby-mode)
  :mode (("\\.rb\\'"       . enh-ruby-mode)
         ("\\.ru\\'"       . enh-ruby-mode)
         ("\\.jbuilder\\'" . enh-ruby-mode)
         ("\\.gemspec\\'"  . enh-ruby-mode)
         ("\\.rake\\'"     . enh-ruby-mode)
         ("Rakefile\\'"    . enh-ruby-mode)
         ("Gemfile\\'"     . enh-ruby-mode)
         ("Guardfile\\'"   . enh-ruby-mode)
         ("Capfile\\'"     . enh-ruby-mode)
         ("Vagrantfile\\'" . enh-ruby-mode))
  :config
  (progn
    (setq enh-ruby-indent-level 2
          enh-ruby-deep-indent-paren nil
          enh-ruby-bounce-deep-indent t
          enh-ruby-hanging-indent-level 2)
    (setq ruby-insert-encoding-magic-comment nil)))

(use-package robe
  :ensure
  :diminish (robe-mode)
  :config
  (add-hook 'enh-ruby-mode-hook 'robe-mode)
  (eval-after-load 'company '(push 'company-robe company-backends)))
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure
  :mode (("\\.yml\\'" . yaml-mode))
  :diminish (yaml-mode))
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :ensure t)

(use-package js2-mode
  :ensure t
  :mode ("\\.js\\'" . js2-mode)
  :diminish (js2-mode)
  :commands js2-mode
  :config
  (setq-default js2-basic-offset 2
                tab-width 2
                indent-tabs-mode nil
                js2-mode-show-parse-errors nil
                js2-mode-show-strict-warnings nil))

(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
(add-hook 'js2-mode-hook #'prettier-js-mode)

(use-package json-mode
  :ensure t
  :mode "\\.json$"
  :diminish (json-mode)
  :config
  (setq json-reformat:indent-width 2
        js-indent-level 2))

(use-package pug-mode
  :ensure t
  :mode (("\\.jade\\'" . pug-mode)
         ("\\.pug\\'" . pug-mode))
  :diminish (pug-mode)
  :config
  (setq pug-tab-width 2))

(use-package company-tern
  :ensure t
  :diminish (tern-mode)
  :config
  (add-hook 'js2-mode-hook 'tern-mode)
  (eval-after-load 'company '(push 'company-tern company-backends)))
#+END_SRC

** Elixir
#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
  :diminish (elixir-mode)
  :ensure t)

(use-package alchemist
  :diminish (alchemist-mode)
  :ensure t)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :diminish (haskell-mode)
  :ensure t
  :mode (("\\.hs\\'" . haskell-mode)
         ("\\.lhs\\'" . haskell-mode)
         ("\\.hsc\\'" . haskell-mode)
         ("\\.cpphs\\'" . haskell-mode)
         ("\\.c2hs\\'" . haskell-mode)))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package pipenv
  :ensure t
  :diminish (pipenv-mode)
  :hook (python-mode . pipenv-mode))
#+END_SRC

** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :diminish (web-mode)
  :ensure t
  :mode (("\\.erb\\'" . web-mode)
         ("\\.html?\\'" . web-mode)
         ("\\.djhtml\\'" . web-mode)
         ("\\.eex\\'" . web-mode)
         ("\\.jsx\\'" . web-mode)
         ("\\.vue\\'" . web-mode))
  :config
  (add-to-list 'web-mode-engine-file-regexps '("django" . "\\.html"))
  (progn
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-engines-alist '(("django" . "\\.html\\'")))))

(add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :diminish (dockerfile-mode)
  :ensure t
  :mode (("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :diminish (rust-mode)
  :ensure t
  :mode (("\\.rs\\'" . rust-mode)))

(use-package flycheck-rust
  :ensure t
  :config
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))

(use-package racer
  :ensure t
  :diminish (racer-mode-hook)
  :config
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))
#+END_SRC
